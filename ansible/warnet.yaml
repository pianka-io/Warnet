- name: Python
  hosts: all
  become: true
  tasks:
    - name: Install pip
      package:
        name: python3-pip
        state: present

    - name: Install boto3 and botocore
      pip:
        name:
          - boto3
          - botocore

- name: Clone and Build Init6
  hosts: all
  become: true
  tasks:
    - name: Install Git, Maven, and Amazon Corretto 8
      yum:
        name:
          - git
          - maven
          - java-1.8.0-amazon-corretto-devel
        state: present

    - name: Find Installed Java Path
      shell: readlink -f $(which java)
      register: java_path

    - name: Set Java 8 as the Default
      alternatives:
        name: java
        path: "{{ java_path.stdout }}"

    - name: Clone Init6 Repository
      git:
        repo: https://github.com/pianka-io/init6.git
        dest: /tmp/init6
        version: master

    - name: Run build script
      shell: |
        cd /tmp/init6
        chmod +x build.sh
        ./build.sh > /tmp/init6_build.log 2>&1
      args:
        executable: /bin/bash
      register: build_output
      ignore_errors: no

    - name: Print build output
      shell: cat /tmp/init6_build.log
      register: build_log_output
      ignore_errors: yes

    - name: Debug build log
      debug:
        var: build_log_output.stdout_lines

    - name: Debug build directory contents
      shell: |
        ls -lah /tmp/init6
        ls -lah /tmp/init6/target
      register: build_debug
      ignore_errors: yes

    - name: Print debug info
      debug:
        var: build_debug.stdout_lines

    - name: Verify Init6 archive exists
      stat:
        path: /tmp/init6/target/init6.tar.gz
      register: archive_stat

    - name: Fail if Init6 archive is missing
      fail:
        msg: "init6.tar.gz was not created by the build process."
      when: not archive_stat.stat.exists

    - name: Move built Init6 archive
      shell: |
        mv /tmp/init6/target/init6.tar.gz /tmp/init6.tar.gz
      register: move_result
      ignore_errors: yes

    - name: Print move result
      debug:
        var: move_result

- name: Configure Init6
  hosts: all
  become: true
  tasks:

    - name: Ensure Init6 service file is uploaded
      copy:
        src: resources/init6.service
        dest: /etc/systemd/system/init6.service

    - name: Ensure Init6 directory exists
      file:
        path: /opt/init6
        state: directory
        mode: '0755'

    - name: Extract Init6 Archive and Move Contents
      shell: |
        tar -xvzf /tmp/init6.tar.gz -C /opt/init6
        mv /opt/init6/init6/* /opt/init6/
        rmdir /opt/init6/init6
        rm /tmp/init6.tar.gz

    - name: Ensure Init6 config file is uploaded
      copy:
        src: resources/init6.conf
        dest: /opt/init6/init6.conf

    - name: Verify Init6 extraction
      shell: |
        ls -lah /opt/init6
      register: extract_debug
      ignore_errors: yes

    - name: Print extraction debug info
      debug:
        var: extract_debug.stdout_lines

    - name: Reload systemd daemon
      shell: systemctl daemon-reload

    - name: Enable and Start Init6 Service
      shell: |
        systemctl enable init6.service
        systemctl start init6.service

    - name: Network Settings
      block:
        - name: Update sysctl.conf
          lineinfile:
            path: /etc/sysctl.conf
            line: "{{ item }}"
            create: yes
          with_items:
            - "fs.file-max = 2097152"
            - "net.core.rmem_max = 134217728"
            - "net.core.wmem_max = 134217728"
            - "net.core.netdev_max_backlog = 300000"
            - "net.core.somaxconn = 65535"
            - "net.ipv4.tcp_rmem = 4096 87380 134217728"
            - "net.ipv4.tcp_wmem = 4096 65536 134217728"
            - "net.ipv4.tcp_max_syn_backlog = 65536"
            - "net.ipv4.tcp_syncookies = 1"
            - "net.ipv4.tcp_max_tw_buckets = 1048576"
            - "net.ipv4.ip_local_port_range = 1024 65535"
            - "net.ipv4.tcp_fin_timeout = 15"
            - "net.ipv4.tcp_keepalive_time = 120"
            - "net.ipv4.tcp_timestamps = 1"
            - "vm.max_map_count = 262144"

        - name: Apply sysctl
          shell: sysctl -p

    - name: System Settings
      block:
        - name: File Descriptors
          lineinfile:
            path: /etc/security/limits.conf
            line: "{{ item }}"
          with_items:
            - "* soft nofile 1048576"
            - "* hard nofile 1048576"
            - "* soft nproc 1048576"
            - "* hard nproc 1048576"

        - name: PAM Session
          lineinfile:
            path: /etc/pam.d/system-auth
            line: "session required pam_limits.so"
            state: present

        - name: PAM Session (non-interactive)
          lineinfile:
            path: /etc/pam.d/password-auth
            line: "session required pam_limits.so"
            state: present

- name: Secrets
  hosts: all
  become: true
  tasks:
    - name: Pull mariadb_password Secret Locally
      delegate_to: localhost
      become: false
      command: aws secretsmanager get-secret-value --secret-id "mariadb_password" --region "us-east-2" --query "SecretString" --output text
      register: mariadb_secret_output
      changed_when: false

    - name: Extract mariadb_password Secret Value
      set_fact:
        mariadb_password: "{{ mariadb_secret_output.stdout | default('') }}"

    - name: Ensure mariadb_password is not empty
      fail:
        msg: "Secret mariadb_password is empty or does not exist."
      when: mariadb_password | length == 0

    - name: Write mariadb_password Secret to Config
      replace:
        path: /opt/init6/init6.conf
        regexp: "<DBPASSWORD>"
        replace: "{{ mariadb_password }}"

    - name: Pull discord_token_ugh Secret Locally
      delegate_to: localhost
      become: false
      command: aws secretsmanager get-secret-value --secret-id "discord_token_ugh" --region "us-east-2" --query "SecretString" --output text
      register: discord_token_output
      changed_when: false

    - name: Extract discord_token_ugh Secret Value
      set_fact:
        discord_token: "{{ discord_token_output.stdout | default('') }}"

    - name: Ensure discord_token is not empty
      fail:
        msg: "Secret discord_token_ugh is empty or does not exist."
      when: discord_token | length == 0

    - name: Ensure /opt/WarCast directory exists
      file:
        path: /opt/WarCast
        state: directory
        mode: '0755'

    - name: Write discord_token_ugh Secret to File
      copy:
        dest: /opt/WarCast/discord_token
        content: "{{ discord_token }}"
        mode: '0777'

- name: Upload WarCast
  hosts: all
  become: true
  tasks:
    - name: Upload WarCast Zip
      copy:
        src: resources/WarCast-1.0.zip
        dest: /tmp/WarCast-1.0.zip

    - name: Ensure /opt/WarCast exists
      file:
        path: /opt/WarCast
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Extract WarCast to /tmp/WarCast-1.0
      unarchive:
        src: /tmp/WarCast-1.0.zip
        dest: /tmp/
        remote_src: yes

    - name: Move WarCast contents to /opt/WarCast
      shell: mv /tmp/WarCast-1.0/* /opt/WarCast/
      args:
        removes: /tmp/WarCast-1.0

    - name: Remove temporary extracted folder
      file:
        path: /tmp/WarCast-1.0
        state: absent

    - name: Set execute permissions for bin folder
      file:
        path: /opt/WarCast
        state: directory
        mode: '0777'
        recurse: yes
        owner: ec2-user
        group: ec2-user

    - name: Open permissions
      shell: |
        chmod -R 0777 /opt/init6

- name: Configure WarCast as Systemd Service
  hosts: all
  become: true
  tasks:
    - name: Create WarCast Systemd Service File
      copy:
        dest: /etc/systemd/system/warcast.service
        content: |
          [Unit]
          Description=WarCast Service
          After=network.target

          [Service]
          WorkingDirectory=/opt/WarCast
          TimeoutStartSec=200
          ExecStartPre=/bin/sleep 180
          ExecStart=/opt/WarCast/bin/WarCast
          Restart=always
          User=ec2-user

          [Install]
          WantedBy=multi-user.target

    - name: Reload Systemd Daemon
      shell: systemctl daemon-reload

    - name: Enable WarCast Service
      systemd:
        name: warcast
        enabled: yes

    - name: Start WarCast Service
      systemd:
        name: warcast
        state: started
